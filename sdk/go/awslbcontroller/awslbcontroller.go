// *** WARNING: this file was generated by pulumi-gen-awslbcontroller. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package awslbcontroller

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Awslbcontroller struct {
	pulumi.ResourceState
}

// NewAwslbcontroller registers a new resource with the given unique name, arguments, and options.
func NewAwslbcontroller(ctx *pulumi.Context,
	name string, args *AwslbcontrollerArgs, opts ...pulumi.ResourceOption) (*Awslbcontroller, error) {
	if args == nil {
		args = &AwslbcontrollerArgs{}
	}

	var resource Awslbcontroller
	err := ctx.RegisterRemoteComponentResource("awslbcontroller:index:awslbcontroller", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type awslbcontrollerArgs struct {
	// Specifies the namespace to install your resources in
	Namespace *string `pulumi:"namespace"`
}

// The set of arguments for constructing a Awslbcontroller resource.
type AwslbcontrollerArgs struct {
	// Specifies the namespace to install your resources in
	Namespace pulumi.StringPtrInput
}

func (AwslbcontrollerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awslbcontrollerArgs)(nil)).Elem()
}

type AwslbcontrollerInput interface {
	pulumi.Input

	ToAwslbcontrollerOutput() AwslbcontrollerOutput
	ToAwslbcontrollerOutputWithContext(ctx context.Context) AwslbcontrollerOutput
}

func (*Awslbcontroller) ElementType() reflect.Type {
	return reflect.TypeOf((*Awslbcontroller)(nil))
}

func (i *Awslbcontroller) ToAwslbcontrollerOutput() AwslbcontrollerOutput {
	return i.ToAwslbcontrollerOutputWithContext(context.Background())
}

func (i *Awslbcontroller) ToAwslbcontrollerOutputWithContext(ctx context.Context) AwslbcontrollerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwslbcontrollerOutput)
}

func (i *Awslbcontroller) ToAwslbcontrollerPtrOutput() AwslbcontrollerPtrOutput {
	return i.ToAwslbcontrollerPtrOutputWithContext(context.Background())
}

func (i *Awslbcontroller) ToAwslbcontrollerPtrOutputWithContext(ctx context.Context) AwslbcontrollerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwslbcontrollerPtrOutput)
}

type AwslbcontrollerPtrInput interface {
	pulumi.Input

	ToAwslbcontrollerPtrOutput() AwslbcontrollerPtrOutput
	ToAwslbcontrollerPtrOutputWithContext(ctx context.Context) AwslbcontrollerPtrOutput
}

type awslbcontrollerPtrType AwslbcontrollerArgs

func (*awslbcontrollerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Awslbcontroller)(nil))
}

func (i *awslbcontrollerPtrType) ToAwslbcontrollerPtrOutput() AwslbcontrollerPtrOutput {
	return i.ToAwslbcontrollerPtrOutputWithContext(context.Background())
}

func (i *awslbcontrollerPtrType) ToAwslbcontrollerPtrOutputWithContext(ctx context.Context) AwslbcontrollerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwslbcontrollerPtrOutput)
}

// AwslbcontrollerArrayInput is an input type that accepts AwslbcontrollerArray and AwslbcontrollerArrayOutput values.
// You can construct a concrete instance of `AwslbcontrollerArrayInput` via:
//
//          AwslbcontrollerArray{ AwslbcontrollerArgs{...} }
type AwslbcontrollerArrayInput interface {
	pulumi.Input

	ToAwslbcontrollerArrayOutput() AwslbcontrollerArrayOutput
	ToAwslbcontrollerArrayOutputWithContext(context.Context) AwslbcontrollerArrayOutput
}

type AwslbcontrollerArray []AwslbcontrollerInput

func (AwslbcontrollerArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Awslbcontroller)(nil))
}

func (i AwslbcontrollerArray) ToAwslbcontrollerArrayOutput() AwslbcontrollerArrayOutput {
	return i.ToAwslbcontrollerArrayOutputWithContext(context.Background())
}

func (i AwslbcontrollerArray) ToAwslbcontrollerArrayOutputWithContext(ctx context.Context) AwslbcontrollerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwslbcontrollerArrayOutput)
}

// AwslbcontrollerMapInput is an input type that accepts AwslbcontrollerMap and AwslbcontrollerMapOutput values.
// You can construct a concrete instance of `AwslbcontrollerMapInput` via:
//
//          AwslbcontrollerMap{ "key": AwslbcontrollerArgs{...} }
type AwslbcontrollerMapInput interface {
	pulumi.Input

	ToAwslbcontrollerMapOutput() AwslbcontrollerMapOutput
	ToAwslbcontrollerMapOutputWithContext(context.Context) AwslbcontrollerMapOutput
}

type AwslbcontrollerMap map[string]AwslbcontrollerInput

func (AwslbcontrollerMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Awslbcontroller)(nil))
}

func (i AwslbcontrollerMap) ToAwslbcontrollerMapOutput() AwslbcontrollerMapOutput {
	return i.ToAwslbcontrollerMapOutputWithContext(context.Background())
}

func (i AwslbcontrollerMap) ToAwslbcontrollerMapOutputWithContext(ctx context.Context) AwslbcontrollerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwslbcontrollerMapOutput)
}

type AwslbcontrollerOutput struct {
	*pulumi.OutputState
}

func (AwslbcontrollerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Awslbcontroller)(nil))
}

func (o AwslbcontrollerOutput) ToAwslbcontrollerOutput() AwslbcontrollerOutput {
	return o
}

func (o AwslbcontrollerOutput) ToAwslbcontrollerOutputWithContext(ctx context.Context) AwslbcontrollerOutput {
	return o
}

func (o AwslbcontrollerOutput) ToAwslbcontrollerPtrOutput() AwslbcontrollerPtrOutput {
	return o.ToAwslbcontrollerPtrOutputWithContext(context.Background())
}

func (o AwslbcontrollerOutput) ToAwslbcontrollerPtrOutputWithContext(ctx context.Context) AwslbcontrollerPtrOutput {
	return o.ApplyT(func(v Awslbcontroller) *Awslbcontroller {
		return &v
	}).(AwslbcontrollerPtrOutput)
}

type AwslbcontrollerPtrOutput struct {
	*pulumi.OutputState
}

func (AwslbcontrollerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Awslbcontroller)(nil))
}

func (o AwslbcontrollerPtrOutput) ToAwslbcontrollerPtrOutput() AwslbcontrollerPtrOutput {
	return o
}

func (o AwslbcontrollerPtrOutput) ToAwslbcontrollerPtrOutputWithContext(ctx context.Context) AwslbcontrollerPtrOutput {
	return o
}

type AwslbcontrollerArrayOutput struct{ *pulumi.OutputState }

func (AwslbcontrollerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Awslbcontroller)(nil))
}

func (o AwslbcontrollerArrayOutput) ToAwslbcontrollerArrayOutput() AwslbcontrollerArrayOutput {
	return o
}

func (o AwslbcontrollerArrayOutput) ToAwslbcontrollerArrayOutputWithContext(ctx context.Context) AwslbcontrollerArrayOutput {
	return o
}

func (o AwslbcontrollerArrayOutput) Index(i pulumi.IntInput) AwslbcontrollerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Awslbcontroller {
		return vs[0].([]Awslbcontroller)[vs[1].(int)]
	}).(AwslbcontrollerOutput)
}

type AwslbcontrollerMapOutput struct{ *pulumi.OutputState }

func (AwslbcontrollerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Awslbcontroller)(nil))
}

func (o AwslbcontrollerMapOutput) ToAwslbcontrollerMapOutput() AwslbcontrollerMapOutput {
	return o
}

func (o AwslbcontrollerMapOutput) ToAwslbcontrollerMapOutputWithContext(ctx context.Context) AwslbcontrollerMapOutput {
	return o
}

func (o AwslbcontrollerMapOutput) MapIndex(k pulumi.StringInput) AwslbcontrollerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Awslbcontroller {
		return vs[0].(map[string]Awslbcontroller)[vs[1].(string)]
	}).(AwslbcontrollerOutput)
}

func init() {
	pulumi.RegisterOutputType(AwslbcontrollerOutput{})
	pulumi.RegisterOutputType(AwslbcontrollerPtrOutput{})
	pulumi.RegisterOutputType(AwslbcontrollerArrayOutput{})
	pulumi.RegisterOutputType(AwslbcontrollerMapOutput{})
}
