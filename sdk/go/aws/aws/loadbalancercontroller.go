// *** WARNING: this file was generated by pulumi-gen-lbcontroller. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Loadbalancercontroller struct {
	pulumi.ResourceState
}

// NewLoadbalancercontroller registers a new resource with the given unique name, arguments, and options.
func NewLoadbalancercontroller(ctx *pulumi.Context,
	name string, args *LoadbalancercontrollerArgs, opts ...pulumi.ResourceOption) (*Loadbalancercontroller, error) {
	if args == nil {
		args = &LoadbalancercontrollerArgs{}
	}

	var resource Loadbalancercontroller
	err := ctx.RegisterRemoteComponentResource("jaxxstorm:aws:loadbalancercontroller", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type loadbalancercontrollerArgs struct {
	// Specifies whether you'd like to create a new namespace to install
	CreateNamespace *bool `pulumi:"createNamespace"`
	// Specifies the namespace to install your resources in
	Namespace *string `pulumi:"namespace"`
}

// The set of arguments for constructing a Loadbalancercontroller resource.
type LoadbalancercontrollerArgs struct {
	// Specifies whether you'd like to create a new namespace to install
	CreateNamespace pulumi.BoolPtrInput
	// Specifies the namespace to install your resources in
	Namespace pulumi.StringPtrInput
}

func (LoadbalancercontrollerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancercontrollerArgs)(nil)).Elem()
}

type LoadbalancercontrollerInput interface {
	pulumi.Input

	ToLoadbalancercontrollerOutput() LoadbalancercontrollerOutput
	ToLoadbalancercontrollerOutputWithContext(ctx context.Context) LoadbalancercontrollerOutput
}

func (*Loadbalancercontroller) ElementType() reflect.Type {
	return reflect.TypeOf((*Loadbalancercontroller)(nil))
}

func (i *Loadbalancercontroller) ToLoadbalancercontrollerOutput() LoadbalancercontrollerOutput {
	return i.ToLoadbalancercontrollerOutputWithContext(context.Background())
}

func (i *Loadbalancercontroller) ToLoadbalancercontrollerOutputWithContext(ctx context.Context) LoadbalancercontrollerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancercontrollerOutput)
}

func (i *Loadbalancercontroller) ToLoadbalancercontrollerPtrOutput() LoadbalancercontrollerPtrOutput {
	return i.ToLoadbalancercontrollerPtrOutputWithContext(context.Background())
}

func (i *Loadbalancercontroller) ToLoadbalancercontrollerPtrOutputWithContext(ctx context.Context) LoadbalancercontrollerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancercontrollerPtrOutput)
}

type LoadbalancercontrollerPtrInput interface {
	pulumi.Input

	ToLoadbalancercontrollerPtrOutput() LoadbalancercontrollerPtrOutput
	ToLoadbalancercontrollerPtrOutputWithContext(ctx context.Context) LoadbalancercontrollerPtrOutput
}

type loadbalancercontrollerPtrType LoadbalancercontrollerArgs

func (*loadbalancercontrollerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Loadbalancercontroller)(nil))
}

func (i *loadbalancercontrollerPtrType) ToLoadbalancercontrollerPtrOutput() LoadbalancercontrollerPtrOutput {
	return i.ToLoadbalancercontrollerPtrOutputWithContext(context.Background())
}

func (i *loadbalancercontrollerPtrType) ToLoadbalancercontrollerPtrOutputWithContext(ctx context.Context) LoadbalancercontrollerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancercontrollerPtrOutput)
}

// LoadbalancercontrollerArrayInput is an input type that accepts LoadbalancercontrollerArray and LoadbalancercontrollerArrayOutput values.
// You can construct a concrete instance of `LoadbalancercontrollerArrayInput` via:
//
//          LoadbalancercontrollerArray{ LoadbalancercontrollerArgs{...} }
type LoadbalancercontrollerArrayInput interface {
	pulumi.Input

	ToLoadbalancercontrollerArrayOutput() LoadbalancercontrollerArrayOutput
	ToLoadbalancercontrollerArrayOutputWithContext(context.Context) LoadbalancercontrollerArrayOutput
}

type LoadbalancercontrollerArray []LoadbalancercontrollerInput

func (LoadbalancercontrollerArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Loadbalancercontroller)(nil))
}

func (i LoadbalancercontrollerArray) ToLoadbalancercontrollerArrayOutput() LoadbalancercontrollerArrayOutput {
	return i.ToLoadbalancercontrollerArrayOutputWithContext(context.Background())
}

func (i LoadbalancercontrollerArray) ToLoadbalancercontrollerArrayOutputWithContext(ctx context.Context) LoadbalancercontrollerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancercontrollerArrayOutput)
}

// LoadbalancercontrollerMapInput is an input type that accepts LoadbalancercontrollerMap and LoadbalancercontrollerMapOutput values.
// You can construct a concrete instance of `LoadbalancercontrollerMapInput` via:
//
//          LoadbalancercontrollerMap{ "key": LoadbalancercontrollerArgs{...} }
type LoadbalancercontrollerMapInput interface {
	pulumi.Input

	ToLoadbalancercontrollerMapOutput() LoadbalancercontrollerMapOutput
	ToLoadbalancercontrollerMapOutputWithContext(context.Context) LoadbalancercontrollerMapOutput
}

type LoadbalancercontrollerMap map[string]LoadbalancercontrollerInput

func (LoadbalancercontrollerMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Loadbalancercontroller)(nil))
}

func (i LoadbalancercontrollerMap) ToLoadbalancercontrollerMapOutput() LoadbalancercontrollerMapOutput {
	return i.ToLoadbalancercontrollerMapOutputWithContext(context.Background())
}

func (i LoadbalancercontrollerMap) ToLoadbalancercontrollerMapOutputWithContext(ctx context.Context) LoadbalancercontrollerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancercontrollerMapOutput)
}

type LoadbalancercontrollerOutput struct {
	*pulumi.OutputState
}

func (LoadbalancercontrollerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Loadbalancercontroller)(nil))
}

func (o LoadbalancercontrollerOutput) ToLoadbalancercontrollerOutput() LoadbalancercontrollerOutput {
	return o
}

func (o LoadbalancercontrollerOutput) ToLoadbalancercontrollerOutputWithContext(ctx context.Context) LoadbalancercontrollerOutput {
	return o
}

func (o LoadbalancercontrollerOutput) ToLoadbalancercontrollerPtrOutput() LoadbalancercontrollerPtrOutput {
	return o.ToLoadbalancercontrollerPtrOutputWithContext(context.Background())
}

func (o LoadbalancercontrollerOutput) ToLoadbalancercontrollerPtrOutputWithContext(ctx context.Context) LoadbalancercontrollerPtrOutput {
	return o.ApplyT(func(v Loadbalancercontroller) *Loadbalancercontroller {
		return &v
	}).(LoadbalancercontrollerPtrOutput)
}

type LoadbalancercontrollerPtrOutput struct {
	*pulumi.OutputState
}

func (LoadbalancercontrollerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Loadbalancercontroller)(nil))
}

func (o LoadbalancercontrollerPtrOutput) ToLoadbalancercontrollerPtrOutput() LoadbalancercontrollerPtrOutput {
	return o
}

func (o LoadbalancercontrollerPtrOutput) ToLoadbalancercontrollerPtrOutputWithContext(ctx context.Context) LoadbalancercontrollerPtrOutput {
	return o
}

type LoadbalancercontrollerArrayOutput struct{ *pulumi.OutputState }

func (LoadbalancercontrollerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Loadbalancercontroller)(nil))
}

func (o LoadbalancercontrollerArrayOutput) ToLoadbalancercontrollerArrayOutput() LoadbalancercontrollerArrayOutput {
	return o
}

func (o LoadbalancercontrollerArrayOutput) ToLoadbalancercontrollerArrayOutputWithContext(ctx context.Context) LoadbalancercontrollerArrayOutput {
	return o
}

func (o LoadbalancercontrollerArrayOutput) Index(i pulumi.IntInput) LoadbalancercontrollerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Loadbalancercontroller {
		return vs[0].([]Loadbalancercontroller)[vs[1].(int)]
	}).(LoadbalancercontrollerOutput)
}

type LoadbalancercontrollerMapOutput struct{ *pulumi.OutputState }

func (LoadbalancercontrollerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Loadbalancercontroller)(nil))
}

func (o LoadbalancercontrollerMapOutput) ToLoadbalancercontrollerMapOutput() LoadbalancercontrollerMapOutput {
	return o
}

func (o LoadbalancercontrollerMapOutput) ToLoadbalancercontrollerMapOutputWithContext(ctx context.Context) LoadbalancercontrollerMapOutput {
	return o
}

func (o LoadbalancercontrollerMapOutput) MapIndex(k pulumi.StringInput) LoadbalancercontrollerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Loadbalancercontroller {
		return vs[0].(map[string]Loadbalancercontroller)[vs[1].(string)]
	}).(LoadbalancercontrollerOutput)
}

func init() {
	pulumi.RegisterOutputType(LoadbalancercontrollerOutput{})
	pulumi.RegisterOutputType(LoadbalancercontrollerPtrOutput{})
	pulumi.RegisterOutputType(LoadbalancercontrollerArrayOutput{})
	pulumi.RegisterOutputType(LoadbalancercontrollerMapOutput{})
}
